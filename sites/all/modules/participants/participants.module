<?php

require_once 'util.php';

/**
 * Implements hook_menu().
 */
function participants_menu() {
  $items = array();

  $items['admin/config/participants/import'] = array(
      'title' => 'Import participants',
      'description' => 'Import participants',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('participants_upload_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/participants/add'] = array(
      'title' => 'Add participants to tournament',
      'description' => 'Import participants',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('participants_add_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/participants/match'] = array(
      'title' => 'Fix match dates',
      'description' => 'Import participants',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('participants_match_fix_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

function participants_add_form(){
  $util = new ParticipantUtil();
  $participants_array = $util->participants();
  $tournaments_array = $util->tournaments();
  
  $form = array();
  $form['all_participants'] = array(
   '#type' => 'checkbox', 
   '#title' => t('Select all participants'),
  );
  $form['participants'] = array(
    '#type' => 'checkboxes',
    '#options' => $participants_array,
    '#title' => t('Participants to add'),
  );
  
  foreach ($participants_array as $part_key => $part_val) {
    $form['participants'][$part_key]= array(
       '#states' => array(
        'checked' =>array(
          ':input[name=all_participants]' => array('checked' => true)
        )
      )
    );
  }

  $form['all_tournaments'] = array(
   '#type' => 'checkbox', 
   '#title' => t('Select all tournaments'),
  );

  $form['tournaments'] = array(
    '#type' => 'checkboxes',
    '#options' => $tournaments_array,
    '#title' => t('Tournaments to add'),
  );
  
  foreach ($tournaments_array as $t_key => $t_val) {
    $form['tournaments'][$t_key]= array(
       '#states' => array(
        'checked' =>array(
          ':input[name=all_tournaments]' => array('checked' => true)
        )
      )
    );
  }
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
  
}

function participants_add_form_submit($form, &$form_state){
  $values = $form_state['values'];
  $participant_values = $values['participants'];
  $tournament_values = $values['tournaments'];
  
  $participants = array_keys(array_filter($participant_values, function($x){return $x;}));
  $tournaments = array_keys(array_filter($tournament_values, function($x){return $x;}));
  
  foreach ($tournaments as $tournament) {
    foreach ($participants as $participant) {
      $id = db_insert('tournament_participants')
        ->fields(array(
          'nid' => $tournament,
          'id' => $participant,
          'status' => 1,
        ))
        ->execute();
    }
  }
  
  drupal_set_message(var_export($participants,1));
  drupal_set_message(var_export($tournaments,1));
}

function participants_upload_form(){
   $form = array();
  // If this #attribute is not present, upload will fail on submit
  $form['file_upload'] = array(
    '#title' => t('Upload file'),
    '#type'  => 'file',
  );
  $form['submit_upload'] = array(
    '#type'  =>  'submit', 
    '#value'  =>  'Submit'
  );
  return $form;
}

function participants_upload_form_submit(){
  $util = new ParticipantUtil();
  $validators = array('file_validate_extensions' => array());
  $file = file_save_upload('file_upload', $validators);
  //$file will be 0 if the upload doesn't exist, or the $dest directory
  //isn't writable
  if ($file) {
    $path = $file->destination;
    $content = file_get_contents($path);
    $util->handle_participants($content);
  }
  else {
    form_set_error('myform', t("Failed to save the file."));
  }
}


function participants_match_fix_form(){
  $form = array();
  $util = new ParticipantUtil();
  $tournaments_array = $util->tournaments();
  $form['tournament'] = array(
    '#type' => 'radios',
    '#options' => $tournaments_array,
    '#title' => t('Tournaments to add'),
    '#default_value' => 1,
  );
  $form['start_date'] = array(
    '#type' => 'date',
    '#title' => t('Start date'),
  );
  
  $form['start_hour'] = array(
    '#type' => 'select',
    '#options' => $util->hours_map(),
    '#title' => t('Start Hour'),
  );
  $form['start_minute'] = array(
    '#type' => 'select',
    '#options' => $util->minutes_map(),
    '#title' => t('Start Minute'),
  );
  $form['duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Match duration in minutes'),
    '#default_value' => '15',
  );
  $form['n_matches'] = array(
    '#type' => 'textfield',
    '#title' => t('Matches per day'),
    '#default_value' => '3',
  );
  
  $form['submit'] = array(
    '#type'  =>  'submit', 
    '#value'  =>  'Submit'
  );
  
  return $form;
}

function participants_match_fix_form_submit($form, &$form_state){
  $util = new ParticipantUtil();
  $values = $form_state['values'];
  $tid = $values['tournament'];
  $start_date = $values['start_date'];
  $hour = $values['start_hour'];
  $minute = $values['start_minute'];
  $duration = $values['duration'];
  $matches = $util->matches($tid);
  $n_day = intval($values['n_matches']);
  
  $i = 0;
  $h = intval($hour);  
  $m = intval($minute);
  $month = intval($start_date['month']);  
  $d = intval($start_date['day']);  
  $y = intval($start_date['year']);
  $initial_timestamp = mktime($h,$m, 0,$month,$d,$y);
  $initial_timestamp = strtotime("-$m minutes",$initial_timestamp);
  $time = $initial_timestamp;
  $days = 0;
  foreach ($matches as $match) {
    $date = $match->match_date;
    drupal_set_message(var_export(format_date($time),1));
    //update
    $update = db_update('matches')->fields(array('match_date' => $time,))->condition('nid', $match->nid)->execute();
    $time = strtotime("+$duration minutes",$time);
    $i++;
    if($i==$n_day){
      $i = 0;
      do{
        $days++;
        $time = strtotime("+$days day",$initial_timestamp);
      }while($util->isWeekend($time));
    }
  }
}